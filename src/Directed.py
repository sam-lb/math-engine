import math, pygame;
from Evaluator import Evaluator;
from Errors import EvaluationError;
from helper_functions import drange;


"""
This module can plot functions as maps from one horizontal axis to another.
no drange on this one because the resulting plot would be hard to see and useless.
edit: nevermind. drange added.

the purpose of this is that a map generated by this program shows how a function
transforms the input very clearly; how the input axis is stretched, condensed, etc.
"""

WIDTH, HEIGHT = 800, 600;
HWIDTH, HHEIGHT = WIDTH // 2, HEIGHT // 2;
STEP = 1 / 6; # 1 / STEP = number of lines per unit.

pygame.init();
screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE);
pygame.display.set_caption("directed map plotter");
screen.fill((255, 255, 255));


def create_text_surface(text, size=16):
    """ text is always in comic sans """
    return pygame.font.SysFont("comic sans", size).render(text, 1, (0, 0, 0));

class Axis():

    """ A number line """

    def __init__(self, y, start=-8, end=8, hash_height=7, side_buffer=20, number_position=1):
        self.y = y;
        self.start, self.end = start, end;
        self.num_units = self.end - self.start;
        self.side_buffer = side_buffer;
        self.scale = (WIDTH - self.side_buffer) // self.num_units;
        self.hash_height = hash_height;
        self.number_position = number_position;

        self.draw();

    def draw(self):
        """ draws the number line on to the screen """
        pygame.draw.line(screen, (0, 0, 0), (self.side_buffer // 2, self.y), (WIDTH - self.side_buffer // 2, self.y), 2);
        for i in drange(self.start, self.end + 1, STEP):
            x = self.__apply(i * self.scale);
            if not i % 1:
                pygame.draw.line(screen, (100, 100, 255), (x, self.y - self.hash_height), (x, self.y + self.hash_height), 3);
                text = create_text_surface(str(i));
                screen.blit(text, (x - text.get_width() / 2, self.y + self.number_position * 2 * self.hash_height + self.number_position * 8));

    def on_scale(self):
        """ determines the position of the number line. called when the screen is resized. """
        self.scale = (WIDTH - self.side_buffer) // self.num_units;

    def __apply(self, x):
        """ turns the scaled cartesian coordinates to pygame """
        return x + HWIDTH;
    
    def as_pygame(self, value):
        """ unscaled cartesian -> pygame """
        return self.__apply(value * self.scale), self.y;

def render_connection(point1, point2, point_color=(255, 0, 0), color=(0, 0, 0), slow=False, width=3):
    """ draws a connection between the number lines """
    if point2[0] == HWIDTH: point_color=(0,128,255); color=(255,0,0); width+=2;
    pygame.display.update(pygame.draw.line(screen, color, point1, point2, width-2));               # remove the pygame.display.update() calls
    pygame.display.update(pygame.draw.circle(screen, point_color, tuple(map(int,point1)), width)); # if you don't want the plotting to be animated
    pygame.display.update(pygame.draw.circle(screen, point_color, tuple(map(int,point2)), width)); # 
    if slow: pygame.time.delay(10);

def render_function(f, x_axis, f_axis, point_color=(255, 0, 0), color=(0, 0, 0)):
    """ draws a function map between two number lines """
    pygame.event.get(); # this will ensure that the window doesn't stop responding during animation
    ev = Evaluator(f);
    screen.blit(create_text_surface("f(x) = " + f, 32), (10, 10));

    for x in drange(2*x_axis.start, 2*x_axis.end + 1, STEP):
        try:
            x_point = x_axis.as_pygame(x);
            f_point = f_axis.as_pygame(ev.evaluate(x=x));
            render_connection(x_point, f_point, point_color, color, x_axis.start<=x<=x_axis.end);
        except (EvaluationError, TypeError):
            pass;
    return;

def reset():
    """ clear the axes """
    screen.fill((255, 255, 255));
    x_axis.draw();
    f_axis.draw();
    pygame.display.flip();

running = True;
clock = pygame.time.Clock();
x_axis = Axis(HEIGHT - 100);
f_axis = Axis(100, number_position=-1);
function = None;

#render_function("x", x_axis, f_axis);

""" press space to enter a new function """

while running:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False;
            break;
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False;
                break;
            elif event.key == pygame.K_SPACE:
                function = input("f(x) = "); reset();
                render_function(function, x_axis, f_axis);
        elif event.type == pygame.VIDEORESIZE:
            WIDTH, HEIGHT = event.w, event.h;
            HWIDTH, HHEIGHT = WIDTH // 2, HHEIGHT // 2;
            screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.RESIZABLE);
            x_axis = Axis(HEIGHT - 100);
            f_axis = Axis(100, number_position=-1);
            reset();
            if function is not None: render_function(function, x_axis, f_axis);
            
    clock.tick(10);
    pygame.display.flip();
    
pygame.quit();
